{
  "name": "klass",
  "description": "Class provider with classical inheritance interface",
  "version": "1.4.0",
  "homepage": "https://github.com/ded/klass",
  "author": {
    "name": "Dustin Diaz",
    "email": "polvero@gmail.com",
    "url": "http://dustindiaz.com"
  },
  "main": "./klass.js",
  "ender": "./src/ender.js",
  "keywords": [
    "ender",
    "class",
    "prototype",
    "inheritance",
    "oop"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/ded/klass.git"
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "devDependencies": {
    "sink-test": ">= 0.0.8",
    "smoosh": "0.4.x"
  },
  "readme": "## Klass\nAn expressive, cross platform JavaScript Class provider with a classical interface to prototypal inheritance.\n\n## API\n### creating a Class\n\n``` js\nvar Person = klass(function (name) {\n  this.name = name\n})\n  .statics({\n    head: ':)',\n    feet: '_|_'\n  })\n  .methods({\n    walk: function () {}\n  })\n```\n\n### Subclassing\n\n``` js\nvar SuperHuman = Person.extend(function (name) {\n  // super class is automagically called\n})\n  .methods({\n    walk: function() {\n      this.supr()\n      this.fly()\n    },\n\n    fly: function() {}\n\n  })\n\nnew SuperHuman('Zelda').walk()\n```\n\n### Object Literal Interface\n\n``` js\nvar Foo = klass({\n  foo: 0,\n  initialize: function() {\n    this.foo = 1\n  },\n  getFoo: function () {\n    return this.foo\n  },\n  setFoo: function (x) {\n    this.foo = x\n    return this.getFoo()\n  }\n})\n```\n\n*note: initialize will be called on class invocation*\n\n### Implement\n\nbecause sometimes you want to overwrite OR mixin an instance method\n\n``` js\n// note you can optionally pass an object literal to extend too ;)\nvar Alien = SuperHuman.extend({\n  beam: function() {\n    this.supr()\n    // beam into space\n  }\n})\n\nvar Spazoid = new Alien('Zoopo')\n\nif (beamIsDown) {\n  Spazoid.implement({\n    beam: function() {\n      this.supr()\n      // fallback to jets\n      this.jets()\n    }\n  })\n}\n```\n\n## Environments\nKlass is [Common JS](http://commonjs.org) compliant and provides the [Modules 1.1](http://wiki.commonjs.org/wiki/Modules/1.1) interface to allow two flavors of development. See the implementations below:\n\n### Browser\n\n``` html\n<script src=\"path/to/klass.js\"></script>\n<!-- klass() is exposed to context -->\n```\n\n### As a node module\n\n``` sh\nnpm install klass\n```\n\n``` js\nvar klass = require('klass')\n```\n\n### Ender compatibility\nadd `klass` to your [ender](http://enderjs.com) compilation\n\n``` sh\nender add klass\n```\n\n### Developers\n\n``` sh\nnpm install\nmake\nmake test\n```\n\nKeep your edits localized to `src/klass.js`\n\n### Happy Klassing!\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/ded/klass/issues"
  },
  "_id": "klass@1.4.0",
  "dist": {
    "shasum": "395c3813d436e5e443731ec6b83565e3994f0a2f"
  },
  "_from": "klass@",
  "_resolved": "https://registry.npmjs.org/klass/-/klass-1.4.0.tgz"
}
